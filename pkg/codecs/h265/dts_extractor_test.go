package h265

import (
	"testing"
	"time"

	"github.com/stretchr/testify/require"
)

func TestDTSExtractor(t *testing.T) {
	type sequenceSample struct {
		au  [][]byte
		pts int64
		dts int64
	}

	for _, ca := range []struct {
		name     string
		sequence []sequenceSample
	}{
		{
			"with timing info, IDR",
			[]sequenceSample{
				{
					[][]byte{
						{ // VPS
							0x40, 0x01, 0x0c, 0x01, 0xff, 0xff, 0x01, 0x60,
							0x00, 0x00, 0x03, 0x00, 0x90, 0x00, 0x00, 0x03,
							0x00, 0x00, 0x03, 0x00, 0x78, 0x99, 0x98, 0x09,
						},
						{ // SPS
							0x42, 0x01, 0x01, 0x01, 0x60, 0x00, 0x00, 0x03,
							0x00, 0x90, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03,
							0x00, 0x78, 0xa0, 0x03, 0xc0, 0x80, 0x10, 0xe5,
							0x96, 0x66, 0x69, 0x24, 0xca, 0xe0, 0x10, 0x00,
							0x00, 0x03, 0x00, 0x10, 0x00, 0x00, 0x03, 0x01,
							0xe0, 0x80,
						},
						{ // PPS
							0x44, 0x1, 0xc1, 0x72, 0xb4, 0x62, 0x40,
						},
						{ // IDR_W_RADL
							0x26, 0x1, 0xaf, 0x8, 0x42, 0x23, 0x48, 0x8a, 0x43, 0xe2,
						},
					},
					0,
					-6000,
				},
				{
					[][]byte{{ // TRAIL_R
						0x02, 0x01, 0xd0, 0x19, 0x5f, 0x8c, 0xb4, 0x42,
						0x49, 0x20, 0x40, 0x11, 0x16, 0x92, 0x93, 0xea,
						0x54, 0x57, 0x4e, 0x0a,
					}},
					int64(100 * time.Millisecond * 90000 / time.Second),
					-3000,
				},
				{
					[][]byte{{ // TRAIL_R
						0x02, 0x01, 0xe0, 0x44, 0x97, 0xe0, 0x81, 0x20,
						0x44, 0x52, 0x62, 0x7a, 0x1b, 0x88, 0x0b, 0x21,
						0x26, 0x5f, 0x10, 0x9c,
					}},
					int64(66666666 * time.Nanosecond * 90000 / time.Second),
					-1,
				},
				{
					[][]byte{{ // TRAIL_N
						0x00, 0x01, 0xe0, 0x24, 0xff, 0xfa, 0x24, 0x0a,
						0x42, 0x25, 0x8c, 0x18, 0xe6, 0x1c, 0xea, 0x5a,
						0x5d, 0x07, 0xc1, 0x8f,
					}},
					int64(33333333 * time.Nanosecond * 90000 / time.Second),
					int64(33333333 * time.Nanosecond * 90000 / time.Second),
				},
				{
					[][]byte{{ // TRAIL_R
						0x02, 0x01, 0xd0, 0x30, 0x97, 0xd7, 0xdc, 0xf9,
						0x0c, 0x10, 0x11, 0x11, 0x20, 0x42, 0x11, 0x18,
						0x63, 0xa5, 0x18, 0x55,
					}},
					int64(200 * time.Millisecond * 90000 / time.Second),
					int64(66666667 * time.Nanosecond * 90000 / time.Second),
				},
				{
					[][]byte{{ // TRAIL_R
						0x02, 0x01, 0xe0, 0xa2, 0x25, 0xd7, 0xf7, 0x08,
						0x12, 0x04, 0x45, 0xa1, 0x83, 0xc0, 0x97, 0x53,
						0xa3, 0x5e, 0x78, 0x14,
					}},
					int64(166666666 * time.Nanosecond * 90000 / time.Second),
					8999,
				},
				{
					[][]byte{{ // TRAIL_N
						0x00, 0x01, 0xe0, 0x82, 0x3f, 0x5f, 0xf6, 0x89,
						0x02, 0x90, 0x88, 0xa3, 0x0c, 0x7d, 0x27, 0x0c,
						0xd4, 0xd9, 0xc2, 0xa5,
					}},
					int64(133333333 * time.Nanosecond * 90000 / time.Second),
					int64(133333333 * time.Nanosecond * 90000 / time.Second),
				},
			},
		},
		{
			"no timing info, CRA",
			[]sequenceSample{
				{
					[][]byte{
						{ // SPS
							0x42, 0x01, 0x01, 0x02, 0x20, 0x00, 0x00, 0x03,
							0x00, 0xb0, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03,
							0x00, 0x7b, 0xa0, 0x07, 0x82, 0x00, 0x88, 0x7d,
							0xb6, 0x71, 0x8b, 0x92, 0x44, 0x80, 0x53, 0x88,
							0x88, 0x92, 0xcf, 0x24, 0xa6, 0x92, 0x72, 0xc9,
							0x12, 0x49, 0x22, 0xdc, 0x91, 0xaa, 0x48, 0xfc,
							0xa2, 0x23, 0xff, 0x00, 0x01, 0x00, 0x01, 0x6a,
							0x02, 0x02, 0x02, 0x01,
						},
						{ // PPS
							0x44, 0x01, 0xc0, 0x25, 0x2f, 0x05, 0x32, 0x40,
						},
						{
							byte(NALUType_CRA_NUT) << 1,
						},
					},
					int64(1 * time.Second * 90000 / time.Second),
					int64(1 * time.Second * 90000 / time.Second),
				},
			},
		},
		{
			"short_term_ref_pic_set_sps_flag",
			[]sequenceSample{
				{
					[][]byte{
						{ // VPS
							0x40, 0x01, 0x0c, 0x01, 0xff, 0xff, 0x01, 0x40,
							0x00, 0x00, 0x03, 0x00, 0x80, 0x00, 0x00, 0x03,
							0x00, 0x00, 0x03, 0x00, 0x99, 0xa5, 0x02, 0x40,
						},
						{ // SPS
							0x42, 0x01, 0x01, 0x01, 0x40, 0x00, 0x00, 0x03,
							0x00, 0x80, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03,
							0x00, 0x99, 0xa0, 0x03, 0xc0, 0x80, 0x10, 0xe5,
							0x8d, 0xa5, 0x92, 0x42, 0x36, 0x22, 0xec, 0xb8,
							0x80, 0x40, 0x00, 0x00, 0x03, 0x00, 0x40, 0x00,
							0x00, 0x05, 0x0f, 0xe2, 0xc4, 0xa0,
						},
						{ // PPS
							0x44, 0x01, 0xc0, 0xe0, 0x98, 0x93, 0x03, 0x05,
							0x14, 0x90,
						},
						{ // IDR
							0x26, 0x01, 0xaf, 0x3e, 0x3d, 0x3a, 0xca, 0xc0,
							0xf2, 0x2f, 0xc3, 0x0f, 0x86, 0x9f, 0xed, 0xfc,
							0x67, 0x2f, 0x62, 0x69,
						},
					},
					int64(1113436 * time.Nanosecond * 90000 / time.Second),
					-4400,
				},
				{
					[][]byte{
						{ // TRAIL_R
							0x02, 0x02, 0xd0, 0x00, 0x0c, 0xc6, 0x27, 0xfe,
							0x6e, 0x6d, 0xe8, 0x10, 0xd5, 0xce, 0x61, 0x1b,
							0x66, 0xf6, 0x21, 0x59,
						},
					},
					int64(68113436 * time.Nanosecond * 90000 / time.Second),
					1630,
				},
				{
					[][]byte{
						{ // TRAIL_R
							0x02, 0x02, 0xd0, 0x00, 0x14, 0xc6, 0x7c, 0xfe,
							0x83, 0x29, 0x34, 0xba, 0xce, 0xaa, 0x8b, 0x76,
							0xb0, 0x95, 0x67, 0xb2,
						},
					},
					int64(101113436 * time.Nanosecond * 90000 / time.Second),
					int64(51113436 * time.Nanosecond * 90000 / time.Second),
				},
			},
		},
		{
			"qsv hevc b_frames=3",
			[]sequenceSample{
				{
					[][]byte{ //nolint:dupl
						{ // VPS
							0x40, 0x01, 0x0c, 0x01, 0xff, 0xff, 0x01, 0x40,
							0x00, 0x00, 0x03, 0x00, 0x90, 0x00, 0x00, 0x03,
							0x00, 0x00, 0x03, 0x00, 0x7b, 0x11, 0xc0, 0xc0,
							0x00, 0x00, 0x03, 0x00, 0x40, 0x00, 0x00, 0x0f,
							0x14,
						},
						{ // SPS
							0x42, 0x01, 0x01, 0x01, 0x40, 0x00, 0x00, 0x03,
							0x00, 0x90, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03,
							0x00, 0x7b, 0xa0, 0x03, 0xc0, 0x80, 0x11, 0x07,
							0xcb, 0xb1, 0x1e, 0xe4, 0x6c, 0x0a, 0x9f, 0xa6,
							0xb9, 0x97, 0x92, 0xcf, 0x60, 0x2d, 0x40, 0x40,
							0x40, 0x45, 0x00, 0x00, 0x03, 0x00, 0x01, 0x00,
							0x00, 0x03, 0x00, 0x3c, 0x60, 0x35, 0xef, 0x7e,
							0x00, 0x02, 0x62, 0x58, 0x00, 0x26, 0x17, 0x20,
						},
						{ // PPS
							0x44, 0x01, 0xc0, 0x3c, 0xf0, 0x1b, 0x64,
						},
						{
							0x4e, 0x01, 0x00, 0x0a, 0x80, 0x00, 0x00, 0x03,
							0x00, 0x55, 0xda, 0x80, 0x01, 0xe5, 0xd0, 0x01,
							0x07, 0x04, 0x00, 0x00, 0xee, 0x00, 0x00, 0x05,
							0x80,
						},
						{
							0x26, 0x01, 0xae, 0x80, 0x8f, 0x4c, 0xdd, 0xfc,
							0xee, 0x2f, 0x79, 0x7c, 0x9e, 0x21, 0x6b, 0x2a,
							0xe7, 0x6a, 0x57, 0x56, 0x46, 0x6f, 0x32, 0x5a,
							0x7c, 0xbc, 0x47, 0xe8, 0xce, 0x5c, 0x5e, 0xfa,
							0x1e, 0xd0, 0x94, 0x08, 0x4c, 0x98, 0x9d, 0xbb,
							0x5d, 0x4c, 0x54, 0xa1, 0xd9, 0x5b, 0x1b, 0xba,
						},
					},
					int64(2033333333 * time.Nanosecond * 90000 / time.Second),
					179999,
				},
				{
					[][]byte{
						{
							0x4e, 0x01, 0x01, 0x07, 0x04, 0x00, 0x00, 0x03,
							0x00, 0x00, 0x03, 0x00, 0x0b, 0x80,
						},
						{
							0x02, 0x01, 0xe2, 0x0a, 0x4f, 0xdd, 0x1e, 0xb7,
							0xb7, 0xa1, 0x80, 0xad, 0xc7, 0x3c, 0x2e, 0x33,
							0x3b, 0xde, 0xcc, 0x77, 0x13, 0x9c, 0x5b, 0xe3,
							0x2c, 0xaa, 0xd4, 0x2e, 0xb0, 0x2b, 0x9e, 0x20,
							0xdd, 0xc9, 0x1b, 0x39, 0xd9, 0x75, 0x06, 0xf5,
							0xa8, 0x1f, 0x66, 0x62, 0x5b, 0xfe, 0x1f, 0xf9,
						},
					},
					int64(2099999999 * time.Nanosecond * 90000 / time.Second),
					int64(2016666666 * time.Nanosecond * 90000 / time.Second),
				},
				{
					[][]byte{
						{
							0x4e, 0x01, 0x01, 0x07, 0x04, 0x00, 0x00, 0x03,
							0x02, 0x00, 0x00, 0x05, 0x80,
						},
						{
							0x02, 0x01, 0xe1, 0x32, 0x27, 0xe3, 0xa0, 0x51,
							0xcd, 0xff, 0x1a, 0x0b, 0x37, 0xaf, 0xe3, 0xe6,
							0x9e, 0xaa, 0x27, 0x82, 0xcd, 0x28, 0xa3, 0xce,
							0x57, 0x8b, 0x02, 0x3e, 0x62, 0x1f, 0x66, 0x5b,
							0xbd, 0x67, 0x6b, 0xb1, 0x47, 0x9d, 0x1b, 0x26,
							0xb7, 0x2a, 0x04, 0xac, 0x2e, 0x94, 0x1e, 0x22,
						},
					},
					int64(2066666666 * time.Nanosecond * 90000 / time.Second),
					int64(2033333333 * time.Nanosecond * 90000 / time.Second),
				},
				{
					[][]byte{
						{
							0x4e, 0x01, 0x01, 0x07, 0x04, 0x00, 0x00, 0x04,
							0x00, 0x00, 0x03, 0x01, 0x80,
						},
						{
							0x00, 0x01, 0xe0, 0xcf, 0x8e, 0x80, 0x1e, 0x96,
							0xa6, 0x88, 0xcb, 0x98, 0xf3, 0xd9, 0x2a, 0x4b,
							0xa7, 0xa0, 0xf8, 0xa0, 0x4d, 0x21, 0x89, 0x76,
							0x54, 0xe3, 0x8f, 0x46, 0xf6, 0x93, 0xde, 0x84,
							0x33, 0x26, 0x3e, 0xe8, 0x20, 0x23, 0xef, 0x39,
							0x03, 0x3c, 0x92, 0x11, 0x50, 0x98, 0xd6, 0x13,
						},
					},
					int64(2049999999 * time.Nanosecond * 90000 / time.Second),
					int64(2049999999 * time.Nanosecond * 90000 / time.Second),
				},
			},
		},
	} {
		t.Run(ca.name, func(t *testing.T) {
			ex := NewDTSExtractor()
			for _, sample := range ca.sequence {
				dts, err := ex.Extract(sample.au, sample.pts)
				require.NoError(t, err)
				require.Equal(t, sample.dts, dts)
			}
		})
	}
}

func FuzzDTSExtractorFirstAU(f *testing.F) {
	f.Fuzz(func(_ *testing.T, a []byte, b []byte, c []byte) {
		if len(a) < 1 || len(b) < 1 || len(c) < 1 {
			return
		}

		ex := NewDTSExtractor()

		ex.Extract([][]byte{ //nolint:errcheck
			a,
			b,
			c,
		}, 0)
	})
}

func FuzzDTSExtractorSecondAU(f *testing.F) { //nolint:dupl
	f.Fuzz(func(t *testing.T, sps int, a []byte) {
		if len(a) < 1 {
			return
		}

		ex := NewDTSExtractor()

		switch sps % 2 {
		case 0:
			_, err := ex.Extract([][]byte{
				{ // SPS
					0x42, 0x01, 0x01, 0x01, 0x40, 0x00, 0x00, 0x03,
					0x00, 0x80, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03,
					0x00, 0x99, 0xa0, 0x03, 0xc0, 0x80, 0x10, 0xe5,
					0x8d, 0xa5, 0x92, 0x42, 0x36, 0x22, 0xec, 0xb8,
					0x80, 0x40, 0x00, 0x00, 0x03, 0x00, 0x40, 0x00,
					0x00, 0x05, 0x0f, 0xe2, 0xc4, 0xa0,
				},
				{ // PPS
					0x44, 0x01, 0xc0, 0xe0, 0x98, 0x93, 0x03, 0x05,
					0x14, 0x90,
				},
				{ // IDR
					0x26,
				},
			}, 0)
			require.NoError(t, err)

		default:
			_, err := ex.Extract([][]byte{
				{ // SPS
					0x42, 0x01, 0x01, 0x01, 0x60, 0x00, 0x00, 0x03,
					0x00, 0x90, 0x00, 0x00, 0x03, 0x00, 0x00, 0x03,
					0x00, 0x78, 0xa0, 0x03, 0xc0, 0x80, 0x10, 0xe5,
					0x96, 0x66, 0x69, 0x24, 0xca, 0xe0, 0x10, 0x00,
					0x00, 0x03, 0x00, 0x10, 0x00, 0x00, 0x03, 0x01,
					0xe0, 0x80,
				},
				{ // PPS
					0x44, 0x01, 0xc1, 0x72, 0xb4, 0x62, 0x40,
				},
				{ // IDR
					0x26,
				},
			}, 0)
			require.NoError(t, err)
		}

		ex.Extract([][]byte{a}, 90000) //nolint:errcheck
	})
}
